# coding: utf-8

"""
    Aqueduct

    Aqueduct's API endpoint  # noqa: E501

    OpenAPI spec version: 0.2.9
    Contact: support@example.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class NotificationSettingsInner(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'integration_id': 'str',
        'notification_level': 'str'
    }

    attribute_map = {
        'integration_id': 'integration_id',
        'notification_level': 'notification_level'
    }

    def __init__(self, integration_id=None, notification_level=None):  # noqa: E501
        """NotificationSettingsInner - a model defined in Swagger"""  # noqa: E501
        self._integration_id = None
        self._notification_level = None
        self.discriminator = None
        self.integration_id = integration_id
        self.notification_level = notification_level

    @property
    def integration_id(self):
        """Gets the integration_id of this NotificationSettingsInner.  # noqa: E501


        :return: The integration_id of this NotificationSettingsInner.  # noqa: E501
        :rtype: str
        """
        return self._integration_id

    @integration_id.setter
    def integration_id(self, integration_id):
        """Sets the integration_id of this NotificationSettingsInner.


        :param integration_id: The integration_id of this NotificationSettingsInner.  # noqa: E501
        :type: str
        """
        if integration_id is None:
            raise ValueError("Invalid value for `integration_id`, must not be `None`")  # noqa: E501

        self._integration_id = integration_id

    @property
    def notification_level(self):
        """Gets the notification_level of this NotificationSettingsInner.  # noqa: E501


        :return: The notification_level of this NotificationSettingsInner.  # noqa: E501
        :rtype: str
        """
        return self._notification_level

    @notification_level.setter
    def notification_level(self, notification_level):
        """Sets the notification_level of this NotificationSettingsInner.


        :param notification_level: The notification_level of this NotificationSettingsInner.  # noqa: E501
        :type: str
        """
        if notification_level is None:
            raise ValueError("Invalid value for `notification_level`, must not be `None`")  # noqa: E501
        allowed_values = ["success", "warning", "error", "info", "neutral"]  # noqa: E501
        if notification_level not in allowed_values:
            raise ValueError(
                "Invalid value for `notification_level` ({0}), must be one of {1}"  # noqa: E501
                .format(notification_level, allowed_values)
            )

        self._notification_level = notification_level

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(NotificationSettingsInner, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, NotificationSettingsInner):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
