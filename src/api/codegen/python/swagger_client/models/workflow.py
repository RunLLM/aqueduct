# coding: utf-8

"""
    Aqueduct

    Aqueduct's API endpoint  # noqa: E501

    OpenAPI spec version: 0.2.9
    Contact: support@example.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class Workflow(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'name': 'str',
        'description': 'str',
        'schedule': 'Schedule',
        'created_at': 'datetime',
        'retention_policy': 'RetentionPolicy',
        'notification_settings': 'NotificationSettings'
    }

    attribute_map = {
        'id': 'id',
        'name': 'name',
        'description': 'description',
        'schedule': 'schedule',
        'created_at': 'created_at',
        'retention_policy': 'retention_policy',
        'notification_settings': 'notification_settings'
    }

    def __init__(self, id=None, name=None, description=None, schedule=None, created_at=None, retention_policy=None, notification_settings=None):  # noqa: E501
        """Workflow - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._name = None
        self._description = None
        self._schedule = None
        self._created_at = None
        self._retention_policy = None
        self._notification_settings = None
        self.discriminator = None
        self.id = id
        self.name = name
        if description is not None:
            self.description = description
        if schedule is not None:
            self.schedule = schedule
        if created_at is not None:
            self.created_at = created_at
        if retention_policy is not None:
            self.retention_policy = retention_policy
        if notification_settings is not None:
            self.notification_settings = notification_settings

    @property
    def id(self):
        """Gets the id of this Workflow.  # noqa: E501


        :return: The id of this Workflow.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Workflow.


        :param id: The id of this Workflow.  # noqa: E501
        :type: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def name(self):
        """Gets the name of this Workflow.  # noqa: E501


        :return: The name of this Workflow.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Workflow.


        :param name: The name of this Workflow.  # noqa: E501
        :type: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def description(self):
        """Gets the description of this Workflow.  # noqa: E501


        :return: The description of this Workflow.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this Workflow.


        :param description: The description of this Workflow.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def schedule(self):
        """Gets the schedule of this Workflow.  # noqa: E501


        :return: The schedule of this Workflow.  # noqa: E501
        :rtype: Schedule
        """
        return self._schedule

    @schedule.setter
    def schedule(self, schedule):
        """Sets the schedule of this Workflow.


        :param schedule: The schedule of this Workflow.  # noqa: E501
        :type: Schedule
        """

        self._schedule = schedule

    @property
    def created_at(self):
        """Gets the created_at of this Workflow.  # noqa: E501


        :return: The created_at of this Workflow.  # noqa: E501
        :rtype: datetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this Workflow.


        :param created_at: The created_at of this Workflow.  # noqa: E501
        :type: datetime
        """

        self._created_at = created_at

    @property
    def retention_policy(self):
        """Gets the retention_policy of this Workflow.  # noqa: E501


        :return: The retention_policy of this Workflow.  # noqa: E501
        :rtype: RetentionPolicy
        """
        return self._retention_policy

    @retention_policy.setter
    def retention_policy(self, retention_policy):
        """Sets the retention_policy of this Workflow.


        :param retention_policy: The retention_policy of this Workflow.  # noqa: E501
        :type: RetentionPolicy
        """

        self._retention_policy = retention_policy

    @property
    def notification_settings(self):
        """Gets the notification_settings of this Workflow.  # noqa: E501


        :return: The notification_settings of this Workflow.  # noqa: E501
        :rtype: NotificationSettings
        """
        return self._notification_settings

    @notification_settings.setter
    def notification_settings(self, notification_settings):
        """Sets the notification_settings of this Workflow.


        :param notification_settings: The notification_settings of this Workflow.  # noqa: E501
        :type: NotificationSettings
        """

        self._notification_settings = notification_settings

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Workflow, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Workflow):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
