# coding: utf-8

"""
    Aqueduct

    Aqueduct's API endpoint  # noqa: E501

    OpenAPI spec version: 0.2.9
    Contact: support@example.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class Schedule(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'trigger': 'str',
        'cron_schedule': 'str',
        'disable_manual_trigger': 'bool',
        'paused': 'bool',
        'source_id': 'str'
    }

    attribute_map = {
        'trigger': 'trigger',
        'cron_schedule': 'cron_schedule',
        'disable_manual_trigger': 'disable_manual_trigger',
        'paused': 'paused',
        'source_id': 'source_id'
    }

    def __init__(self, trigger=None, cron_schedule=None, disable_manual_trigger=None, paused=None, source_id=None):  # noqa: E501
        """Schedule - a model defined in Swagger"""  # noqa: E501
        self._trigger = None
        self._cron_schedule = None
        self._disable_manual_trigger = None
        self._paused = None
        self._source_id = None
        self.discriminator = None
        self.trigger = trigger
        if cron_schedule is not None:
            self.cron_schedule = cron_schedule
        if disable_manual_trigger is not None:
            self.disable_manual_trigger = disable_manual_trigger
        if paused is not None:
            self.paused = paused
        if source_id is not None:
            self.source_id = source_id

    @property
    def trigger(self):
        """Gets the trigger of this Schedule.  # noqa: E501


        :return: The trigger of this Schedule.  # noqa: E501
        :rtype: str
        """
        return self._trigger

    @trigger.setter
    def trigger(self, trigger):
        """Sets the trigger of this Schedule.


        :param trigger: The trigger of this Schedule.  # noqa: E501
        :type: str
        """
        if trigger is None:
            raise ValueError("Invalid value for `trigger`, must not be `None`")  # noqa: E501
        allowed_values = ["manual", "periodic", "airflow", "cascade"]  # noqa: E501
        if trigger not in allowed_values:
            raise ValueError(
                "Invalid value for `trigger` ({0}), must be one of {1}"  # noqa: E501
                .format(trigger, allowed_values)
            )

        self._trigger = trigger

    @property
    def cron_schedule(self):
        """Gets the cron_schedule of this Schedule.  # noqa: E501


        :return: The cron_schedule of this Schedule.  # noqa: E501
        :rtype: str
        """
        return self._cron_schedule

    @cron_schedule.setter
    def cron_schedule(self, cron_schedule):
        """Sets the cron_schedule of this Schedule.


        :param cron_schedule: The cron_schedule of this Schedule.  # noqa: E501
        :type: str
        """

        self._cron_schedule = cron_schedule

    @property
    def disable_manual_trigger(self):
        """Gets the disable_manual_trigger of this Schedule.  # noqa: E501


        :return: The disable_manual_trigger of this Schedule.  # noqa: E501
        :rtype: bool
        """
        return self._disable_manual_trigger

    @disable_manual_trigger.setter
    def disable_manual_trigger(self, disable_manual_trigger):
        """Sets the disable_manual_trigger of this Schedule.


        :param disable_manual_trigger: The disable_manual_trigger of this Schedule.  # noqa: E501
        :type: bool
        """

        self._disable_manual_trigger = disable_manual_trigger

    @property
    def paused(self):
        """Gets the paused of this Schedule.  # noqa: E501


        :return: The paused of this Schedule.  # noqa: E501
        :rtype: bool
        """
        return self._paused

    @paused.setter
    def paused(self, paused):
        """Sets the paused of this Schedule.


        :param paused: The paused of this Schedule.  # noqa: E501
        :type: bool
        """

        self._paused = paused

    @property
    def source_id(self):
        """Gets the source_id of this Schedule.  # noqa: E501


        :return: The source_id of this Schedule.  # noqa: E501
        :rtype: str
        """
        return self._source_id

    @source_id.setter
    def source_id(self, source_id):
        """Sets the source_id of this Schedule.


        :param source_id: The source_id of this Schedule.  # noqa: E501
        :type: str
        """

        self._source_id = source_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Schedule, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Schedule):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
