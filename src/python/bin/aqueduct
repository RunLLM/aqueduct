#!/usr/bin/env python3

import argparse
import os
import platform
import socket
import subprocess
import sys
import time
import yaml
import shutil

import distro

base_directory = os.path.join(os.environ["HOME"], ".aqueduct")
server_directory = os.path.join(os.environ["HOME"], ".aqueduct", "server")
ui_directory = os.path.join(os.environ["HOME"], ".aqueduct", "ui")

package_version = "0.0.4"
default_server_port = 8080

welcome_message = """
***************************************************
Your API Key: %s

The Web UI and the backend server are accessible at: http://%s:%d
***************************************************
"""

def execute_command(args, cwd=None):
    with subprocess.Popen(args, stdout=sys.stdout, stderr=sys.stderr, cwd=cwd) as proc:
        proc.communicate()
        if proc.returncode != 0:
            raise Exception("Error executing command: %s" % args)

def execute_command_nonblocking(args, cwd=None):
    return subprocess.Popen(args, stdout=sys.stdout, stderr=sys.stderr, cwd=cwd)

def generate_welcome_message(expose, port):
    if not expose:
        expose_ip = "localhost"
    else:
        expose_ip = "<IP_ADDRESS>"
    apikey = get_apikey()
    return welcome_message % (apikey, expose_ip, port)

def is_port_in_use(port: int) -> bool:
    with socket.socket(socket.AF_INET, socket.SOCK_STREAM) as s:
        return s.connect_ex(("localhost", port)) == 0

def start(expose, port): 
    if port is None:
        server_port = default_server_port
        while is_port_in_use(server_port):
            server_port += 1
        if not server_port == default_server_port:
            print("Default port %d is occupied. Next available port is %d" % (default_server_port, server_port))
    else:
        server_port = int(port)
        print("Server will use the user-specified port %d" % server_port)

    if expose:
        popen_handle = execute_command_nonblocking(
            [
                os.path.join(server_directory, "bin", "server"), 
                "--config", 
                os.path.join(server_directory, "config", "config.yml"), 
                "--expose",
                "--port",
                str(server_port),
            ], 
        )
    else:
        popen_handle = execute_command_nonblocking(
            [
                os.path.join(server_directory, "bin", "server"), 
                "--config", 
                os.path.join(server_directory, "config", "config.yml"),
                "--port",
                str(server_port),
            ], 
        )
    return popen_handle, server_port

def install_postgres():
    execute_command([sys.executable, "-m", "pip", "install", "psycopg2-binary"])

def install_bigquery():
    execute_command([sys.executable, "-m", "pip", "install", "google-cloud-bigquery"])

def install_snowflake():
    execute_command([sys.executable, "-m", "pip", "install", "snowflake-sqlalchemy"])

def install_s3():
    execute_command([sys.executable, "-m", "pip", "install", "pyarrow"])

def install_mysql():
    system = platform.system()
    if system == "Linux":
        if distro.id() == "ubuntu" or distro.id() == "debian":
            execute_command(["sudo", "apt-get", "install", "-y", "python3-dev", "default-libmysqlclient-dev", "build-essential"])
        elif distro.id() == "centos" or distro.id() == "rhel":
            execute_command(["sudo", "yum", "install", "-y", "python3-devel", "mysql-devel"])
        else:
            print("Unsupported distribution:", distro.id())
    elif system == "Darwin":
        execute_command(["brew", "install", "mysql"])
    else:
        print("Unsupported operating system:", system)
    
    execute_command([sys.executable, "-m", "pip", "install", "mysqlclient"])

def install_sqlserver():
    system = platform.system()
    if system == "Linux":
        if distro.id() == "ubuntu":
            execute_command(["bash", os.path.join(server_directory, "bin", "install_sqlserver_ubuntu.sh")])
        else:
            print("Unsupported distribution:", distro.id())
    elif system == "Darwin":
        execute_command(["brew", "tap", "microsoft/mssql-release", "https://github.com/Microsoft/homebrew-mssql-release"])
        execute_command(["brew", "update"])
        execute_command(["HOMEBREW_NO_ENV_FILTERING=1", "ACCEPT_EULA=Y", "brew", "install", "msodbcsql17", "mssql-tools"])
    else:
        print("Unsupported operating system:", system)
    
    execute_command([sys.executable, "-m", "pip", "install", "pyodbc"])

def install(system):
    if system == "postgres":
        install_postgres()
    elif system == "bigquery":
        install_bigquery()
    elif system == "snowflake":
        install_snowflake()
    elif system == "s3":
        install_s3()
    elif system == "mysql":
        install_mysql()
    elif system == "sqlserver":
        install_sqlserver()
    else:
        raise Exception("Unsupported system: %s" % system)

def get_apikey():
    config_file = os.path.join(server_directory, "config", "config.yml")
    with open(config_file, "r") as f:
        try:
            return yaml.safe_load(f)['apiKey']
        except yaml.YAMLError as exc:
            print(exc)
            exit(1)

def apikey():
    print(get_apikey())

def clear():
    shutil.rmtree(base_directory, ignore_errors=True)

def version():
    print(package_version)

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='The Aqueduct CLI')
    subparsers = parser.add_subparsers(dest="command")
    
    start_args = subparsers.add_parser('start', help=
                               '''This starts the Aqueduct server and the UI in a blocking
                               fashion. To background the process run aqueduct start &.

                               Add --expose <IP_ADDRESS> to access the Aqueduct service from
                               an external server, where <IP_ADDRESS> is the
                               public IP of the server running the Aqueduct service.
                               ''')
    start_args.add_argument('--expose', default=False, action='store_true',
                    help="Use this option to expose the server to the public.")
    start_args.add_argument('--port', dest="port", help="Specify the port on which the Aqueduct server runs.")
    server_args = subparsers.add_parser('server', help=
                                   '''[DEPRECATED] This starts the Aqueduct server in a
                                   blocking fashion. To background the process,
                                   run aqueduct server &.''')
    server_args.add_argument('--expose', default=False, action='store_true',
                    help="Use this option to expose the server to the public.")
    ui_args = subparsers.add_parser('ui', help=
                               '''[DEPRECATED] This starts the Aqueduct UI in a blocking
                               fashion. To background the process run aqueduct
                               ui &.

                               Add --expose <IP_ADDRESS> to access the UI from
                               an external server, where <IP_ADDRESS> is the
                               public IP of the server you are running on.
                               ''')
    ui_args.add_argument('--expose', dest="expose", 
                    help="The IP address of the server running Aqueduct.") 

    install_args = subparsers.add_parser('install', help=
                             '''Install the required library dependencies for
                             an Aqueduct connector to a third-party system.''')
    install_args.add_argument('system', nargs=1, help="Supported integrations: postgres, mysql, sqlserver, s3, snowflake, bigquery.")

    apikey_args = subparsers.add_parser('apikey', help="Display your Aqueduct API key.")
    clear_args = subparsers.add_parser('clear', help="Erase your Aqueduct installation.")
    version_args = subparsers.add_parser('version', help="Retrieve the package version number.")

    args = parser.parse_args()

    if not os.path.isdir(base_directory):
        print("Please install or update aqueduct-ml with `pip install aqueduct-ml`.")
        sys.exit(1)
    
    if args.command == "start":
        try:
            popen_handle, server_port = start(args.expose, args.port)
            time.sleep(1)
            terminated = popen_handle.poll()
            if terminated:
                print("Server terminated due to an error.")
            else:
                print(generate_welcome_message(args.expose, server_port))
                popen_handle.wait()
        except (Exception, KeyboardInterrupt) as e:
            print(e)
            print('\nTerminating Aqueduct service...')
            popen_handle.kill()
            print('Aqueduct service successfully terminated.')
    elif args.command == "server":
        print("aqueduct ui and aqueduct server have been deprecated; please use aqueduct start to run both the UI and backend servers")
    elif args.command == "install":
        install(args.system[0]) # argparse makes this an array so only pass in value [0].
    elif args.command == "ui":
        print("aqueduct ui and aqueduct server have been deprecated; please use aqueduct start to run both the UI and backend servers")
    elif args.command == "apikey":
        apikey()
    elif args.command == "clear":
        clear()
    elif args.command == "version":
        version()
    elif args.command is None:
        parser.print_help()
    else:
        print("Unsupported command:", args.command)
        sys.exit(1)
