from datetime import datetime

from airflow.models import DAG
from airflow.operators.python import PythonVirtualenvOperator

# Python requirements for each Airflow task
VENV_REQUIREMENTS=[
    "aqueduct-ml",
    "awswrangler",
    "boto3",
    "cloudpickle",
    "distro",
    "google-cloud-bigquery",
    "mysqlclient",
    "pandas",
    "psycopg2-binary",
    "pyarrow",
    "pydantic",
    "pyodbc",
    "pyyaml",
    "snowflake-sqlalchemy",
    "SQLAlchemy",
    "typing_extensions",
]

def invoke_task(spec, **kwargs):
    '''
    Check the spec type and invoke the correct operator.
    First, append the dag_run_id to all of the storage paths in the spec.
    '''
    from aqueduct_executor.operators.utils import enums
    from aqueduct_executor.operators.function_executor import spec as func_spec
    from aqueduct_executor.operators.param_executor import spec as param_spec
    from aqueduct_executor.operators.system_metric_executor import spec as sys_metric_spec
    from aqueduct_executor.operators.connectors.data import spec as conn_spec

    from aqueduct_executor.operators.function_executor import execute as func_execute
    from aqueduct_executor.operators.param_executor import execute as param_execute
    from aqueduct_executor.operators.system_metric_executor import execute as sys_metric_execute
    from aqueduct_executor.operators.connectors.data import execute as conn_execute

    dag_run_id = kwargs["run_id"]

    spec_type = enums.JobType(spec["type"])
    if spec_type == enums.JobType.FUNCTION:
        spec = func_spec.FunctionSpec(**spec)
        spec.metadata_path = "{}_{}".format(spec.metadata_path, dag_run_id)
        spec.input_content_paths = ["{}_{}".format(p, dag_run_id) for p in spec.input_content_paths]
        spec.input_metadata_paths = ["{}_{}".format(p, dag_run_id) for p in spec.input_metadata_paths]
        spec.output_content_paths = ["{}_{}".format(p, dag_run_id) for p in spec.output_content_paths]
        spec.output_metadata_paths = ["{}_{}".format(p, dag_run_id) for p in spec.output_metadata_paths]
        func_execute.run_with_setup(spec)
    elif spec_type == enums.JobType.EXTRACT:
        spec = conn_spec.ExtractSpec(**spec)
        spec.metadata_path = "{}_{}".format(spec.metadata_path, dag_run_id)
        spec.output_content_path = "{}_{}".format(spec.output_content_path, dag_run_id)
        spec.output_metadata_path = "{}_{}".format(spec.output_metadata_path, dag_run_id)
        conn_execute.run(spec)
    elif spec_type == enums.JobType.LOAD:
        spec = conn_spec.LoadSpec(**spec)
        spec.metadata_path = "{}_{}".format(spec.metadata_path, dag_run_id)
        spec.input_content_path = "{}_{}".format(spec.input_content_path, dag_run_id)
        spec.input_metadata_path = "{}_{}".format(spec.input_metadata_path, dag_run_id)
        conn_execute.run(spec)
    elif spec_type == enums.JobType.PARAM:
        spec = param_spec.ParamSpec(**spec)
        spec.metadata_path = "{}_{}".format(spec.metadata_path, dag_run_id)
        spec.output_content_path = "{}_{}".format(spec.output_content_path, dag_run_id)
        spec.output_metadata_path = "{}_{}".format(spec.output_metadata_path, dag_run_id)
        param_execute.run(spec)
    elif spec_type == enums.JobType.SYSTEM_METRIC:
        spec = sys_metric_spec.SystemMetricSpec(**spec)
        spec.metadata_path = "{}_{}".format(spec.metadata_path, dag_run_id)
        spec.input_metadata_paths = ["{}_{}".format(p, dag_run_id) for p in spec.input_metadata_paths]
        spec.output_content_path = "{}_{}".format(spec.output_content_path, dag_run_id)
        spec.output_metadata_path = "{}_{}".format(spec.output_metadata_path, dag_run_id)
        sys_metric_execute.run(spec)


with DAG(
    dag_id='{{ dag_id }}',
    default_args={
        'retries': 0,
    },
    start_date=datetime(2022, 1, 1, 1),
    {% if schedule %}
    schedule_interval='{{ schedule }}',
    {% else %}
    schedule_interval={{ schedule }},
    {% endif %}
    catchup=False,
    tags=['aqueduct'],
) as dag:
    # Constants to handle JSON serialization
    null = None
    false = False
    true = True


    {% for task in tasks %}
    {{ task.alias }} = PythonVirtualenvOperator(
        task_id='{{ task.id }}',
        requirements=VENV_REQUIREMENTS,
        system_site_packages=False,
        python_callable=invoke_task,
        op_args=[
    {{ task.spec.json(indent=4, separators=(',', ': ')) }}
        ],
    )
    {% endfor %}

{% for edge in edges %}
    {{ task_to_alias[edge[0]] }}.set_downstream({{ task_to_alias[edge[1]] }})
{% endfor %}
