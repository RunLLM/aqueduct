import { CircularProgress } from '@mui/material';
import Box from '@mui/material/Box';
import React from 'react';
import { useParams } from 'react-router-dom';

import { getMetricsAndChecksOnArtifact } from '../../../..//handlers/responses/node';
import { useNodeArtifactResultContentGetQuery } from '../../../../handlers/AqueductApi';
import UserProfile from '../../../../utils/auth';
import ExecutionStatus from '../../../../utils/shared';
import DefaultLayout, { SidesheetContentWidth } from '../../../layouts/default';
import CsvExporter from '../../../workflows/artifact/csvExporter';
import {
  ChecksOverview,
  MetricsOverview,
} from '../../../workflows/artifact/metricsAndChecksOverview';
import OperatorSummaryList from '../../../workflows/operator/summaryList';
import DetailsPageHeader from '../../components/DetailsPageHeader';
import { LayoutProps } from '../../types';
import {
  useWorkflowBreadcrumbs,
  useWorkflowIds,
  useWorkflowNodes,
  useWorkflowNodesResults,
} from '../../workflow/id/hook';
import Preview from './components/Preview';

type ArtifactDetailsPageProps = {
  user: UserProfile;
  Layout?: React.FC<LayoutProps>;
  nodeId?: string;
  sideSheetMode?: boolean;
};

const ArtifactDetailsPage: React.FC<ArtifactDetailsPageProps> = ({
  user,
  Layout = DefaultLayout,
  nodeId,
  sideSheetMode = false,
}) => {
  const { workflowId, dagId, dagResultId } = useWorkflowIds(user.apiKey);

  const { nodeId: nodeIdParam } = useParams();
  if (!nodeId) {
    nodeId = nodeIdParam;
  }

  const breadcrumbs = useWorkflowBreadcrumbs(
    user.apiKey,
    workflowId,
    dagId,
    dagResultId,
    'Operator'
  );

  const nodes = useWorkflowNodes(user.apiKey, workflowId, dagId);
  const nodeResults = useWorkflowNodesResults(
    user.apiKey,
    workflowId,
    dagResultId
  );

  const node = nodes.artifacts[nodeId];
  const nodeResult = nodeResults.artifacts[nodeId];

  const {
    data: content,
    isLoading: contentLoading,
    error: contentError,
  } = useNodeArtifactResultContentGetQuery(
    {
      apiKey: user.apiKey,
      workflowId,
      dagId,
      nodeId,
      nodeResultId: nodeResult?.id,
    },
    { skip: !nodeResult }
  );

  if (!node) {
    return (
      <Layout breadcrumbs={breadcrumbs} user={user}>
        <CircularProgress />
      </Layout>
    );
  }

  const upstreamPending =
    (nodeResults?.operators ?? {})[node.input]?.exec_state?.status ===
    ExecutionStatus.Pending;

  const artifactStatus = nodeResult?.exec_state?.status;
  const previewAvailable =
    artifactStatus && artifactStatus !== ExecutionStatus.Canceled;

  const { metrics, checks } = getMetricsAndChecksOnArtifact(nodes, nodeId);

  return (
    <Layout breadcrumbs={breadcrumbs} user={user}>
      <Box width={sideSheetMode ? SidesheetContentWidth : '100%'}>
        <Box width="100%">
          {!sideSheetMode && (
            <Box width="100%" display="flex" alignItems="center">
              <DetailsPageHeader name={node.name} status={artifactStatus} />
              <CsvExporter
                artifact={node}
                content={content}
                isLoading={contentLoading}
              />
            </Box>
          )}

          <Box display="flex" width="100%" mt={sideSheetMode ? '16px' : '64px'}>
            {
              <Box width="100%" mr="32px">
                <OperatorSummaryList
                  title={'Generated By'}
                  workflowId={workflowId}
                  dagId={dagId}
                  dagResultId={dagResultId}
                  nodes={nodes}
                  operatorIds={[node.input]}
                />
              </Box>
            }

            {node.outputs.length > 0 && (
              <Box width="100%">
                <OperatorSummaryList
                  title={'Consumed By'}
                  workflowId={workflowId}
                  dagId={dagId}
                  dagResultId={dagResultId}
                  nodes={nodes}
                  operatorIds={node.outputs}
                />
              </Box>
            )}
          </Box>

          {
            <Preview
              upstreamPending={upstreamPending}
              previewAvailable={previewAvailable}
              artifactResult={nodeResult}
              content={content}
              contentLoading={contentLoading}
              contentError={contentError as string}
            />
          }

          <Box display="flex" width="100%">
            <MetricsOverview metrics={metrics} nodeResults={nodeResults} />
            <Box width="96px" />
            <ChecksOverview checks={checks} nodeResults={nodeResults} />
          </Box>
        </Box>
      </Box>
    </Layout>
  );
};

export default ArtifactDetailsPage;
